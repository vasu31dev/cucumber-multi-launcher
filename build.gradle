plugins {
    id 'java'
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'io.cucumber:cucumber-java:7.2.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.apache.commons:commons-lang3:3.12.0'
    testImplementation 'net.masterthought:cucumber-reporting:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter:5.8.2'
}

tasks.register('cucumber', JavaExec) {
    dependsOn assemble, testClasses
    mainClass = "com.tomgregory.cucumber.CucumberLauncher"
    classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
    args = [
            '--plugin', 'pretty',
            '--plugin', 'html:build/cucumber-report.html',
            '--glue', 'com.tomgregory.cucumber',
            '--dir0', 'src/test/resources/features1',
            '--dir1', 'src/test/resources/features2'
    ]
}

tasks.register('runCucumber', JavaExec) {
    dependsOn cleanReports, testClasses
    mainClass = "com.tomgregory.cucumber.RunCucumber"
    classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
    (1..10).parallelStream().forEach(i -> {
        systemProperty "tags$i", findProperty("tags$i")
        systemProperty "threads$i", findProperty("threads$i")
    })
//    systemProperty "CUCUMBER_PUBLISH_ENABLED", true
    systemProperty "cucumber.publish.quiet", true
    args = [
            '--glue', 'com.tomgregory.cucumber', 'src/test/resources',
            '--plugin', 'pretty',
            '--plugin', "runtimeHtml",
            '--plugin', "runtimeRerun",
            '--plugin', "runtimeJson",
            '--threads', "runtimeThreads",
            '--tags', "runtimeTag"
    ]
}

tasks.register('cleanReports', Delete) {
    delete 'build/GridReports'
}

tasks.register('rerunCucumber', JavaExec) {
    dependsOn cleanRerunReports, testClasses
    mainClass = "com.tomgregory.cucumber.RunCucumber"
    classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
    (1..10).parallelStream().forEach(i -> {
        systemProperty "threads$i", findProperty("threads$i")
    })
    systemProperty "rerun", true
//    systemProperty "CUCUMBER_PUBLISH_ENABLED", true
    systemProperty "cucumber.publish.quiet", true
    args = [
            '--plugin', 'pretty',
            '--plugin', "runtimeHtml",
            '--plugin', "runtimeRerun",
            '--plugin', "runtimeJson",
            '--threads', "runtimeThreads",
            '--glue', 'com.tomgregory.cucumber', 'runtimeFeatures'
    ]
}

//delete recursively all the files and directories in GridReports except for rerun.txt files which are not empty
tasks.register('cleanRerunReports') {
    def reportDir = fileTree("build/GridReports")
    delete reportDir.matching {
        exclude '**/rerun.txt'
    }
    reportDir.forEach((txt) -> {
        if (txt.length() == 0)
            delete txt.getParent()
    })

    reportDir.visit { def fileVisitDetails ->
        def file = fileVisitDetails.file
        if (file.isDirectory() && (file.list().length == 0)) {
            file.delete()
        }
    }

}